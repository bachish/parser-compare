/* The following code was generated by JFlex 1.7.0 */

package jflex;
/*
 * Copyright (C) 1998-2018  Gerwin Klein <lsf@jflex.de>
 * SPDX-License-Identifier: GPL-2.0-only
 */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals,
   because the input is read twice and the methods used to parse
   the numbers are not very fast.
   For a production quality application (e.g. a Java compiler)
   this could be optimized */



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>java.flex</tt>
 */
public class JavaScanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\112\1\113\1\1\16\7\4\0\1\3\1\73"+
    "\1\24\1\0\1\6\1\103\1\77\1\25\1\60\1\61\1\5\1\101"+
    "\1\67\1\23\1\21\1\4\1\10\1\16\1\104\1\15\1\105\1\17"+
    "\1\110\1\106\1\107\1\11\1\76\1\66\1\72\1\70\1\71\1\75"+
    "\1\57\2\14\1\111\1\20\1\22\1\20\5\6\1\12\13\6\1\13"+
    "\2\6\1\64\1\26\1\65\1\102\1\6\1\0\1\27\1\30\1\34"+
    "\1\46\1\37\1\50\1\53\1\43\1\44\1\6\1\41\1\36\1\51"+
    "\1\40\1\35\1\52\1\6\1\33\1\31\1\32\1\45\1\54\1\55"+
    "\1\47\1\42\1\56\1\62\1\100\1\63\1\74\6\7\1\114\32\7"+
    "\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6"+
    "\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6"+
    "\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0"+
    "\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\246\6\1\0"+
    "\46\6\2\0\1\6\6\0\51\6\6\0\1\6\1\0\55\7\1\0"+
    "\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\4\0"+
    "\4\6\15\0\6\7\5\0\1\6\4\0\13\7\1\0\1\7\3\0"+
    "\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0"+
    "\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6"+
    "\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6"+
    "\16\0\12\7\41\6\11\7\2\6\4\0\1\6\2\0\1\7\30\6"+
    "\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7"+
    "\4\0\13\6\5\0\30\6\1\0\6\6\1\0\2\7\6\0\10\7"+
    "\52\6\72\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7"+
    "\2\0\12\7\1\0\20\6\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\4\6\7\0\2\6\1\0\1\7"+
    "\2\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7"+
    "\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6"+
    "\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6"+
    "\2\7\2\0\12\7\1\0\1\6\7\0\1\6\6\7\1\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\7\0\3\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6"+
    "\6\0\1\7\16\0\12\7\11\0\1\6\6\0\5\7\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\20\6\2\0\1\7\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\1\0\3\6\2\0\1\6\2\0"+
    "\2\6\2\7\2\0\12\7\20\0\1\6\3\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\6\0\2\6\1\0"+
    "\2\6\2\7\2\0\12\7\1\0\2\6\1\7\14\0\4\7\11\6"+
    "\1\0\3\6\1\0\51\6\2\7\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\1\6\5\0\3\6\1\7\7\0\3\6\2\7\2\0\12\7"+
    "\12\0\6\6\1\0\3\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\6\0\12\7\2\0\2\7\15\0\60\6\1\7\2\6"+
    "\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6"+
    "\1\0\5\6\1\0\30\6\1\0\1\6\1\0\12\6\1\7\2\6"+
    "\11\7\1\6\2\0\5\6\1\0\1\6\1\0\7\7\1\0\12\7"+
    "\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0"+
    "\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0"+
    "\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6"+
    "\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0"+
    "\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0"+
    "\3\7\40\0\20\6\20\0\126\6\2\0\6\6\3\0\u026c\6\2\0"+
    "\21\6\1\0\32\6\5\0\113\6\3\0\13\6\7\0\22\6\4\7"+
    "\11\0\23\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\17\7\6\0\131\6\7\0\5\6\2\7\42\6"+
    "\1\7\1\6\5\0\106\6\12\0\37\6\1\0\14\7\4\0\14\7"+
    "\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\32\6\6\0"+
    "\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0"+
    "\13\7\6\0\12\7\15\0\1\6\10\0\16\7\1\0\20\7\61\0"+
    "\5\7\57\6\21\7\10\6\3\0\12\7\21\0\11\7\14\0\3\7"+
    "\36\6\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0"+
    "\12\7\3\0\3\6\12\7\44\6\2\0\11\6\7\0\53\6\2\0"+
    "\3\6\20\0\3\7\1\0\25\7\4\6\1\7\6\6\1\7\2\6"+
    "\3\7\1\6\5\0\300\6\100\7\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\16\0\5\7\30\0\1\112\1\112\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\5\7\1\0\12\7\1\0\1\6\15\0\1\6"+
    "\20\0\15\6\3\0\41\6\17\0\15\7\4\0\1\7\3\0\14\7"+
    "\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\345\6"+
    "\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0"+
    "\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7"+
    "\2\0\3\6\1\0\132\6\1\0\4\6\5\0\53\6\1\0\136\6"+
    "\21\0\40\6\60\0\20\6\u0200\0\u19c0\6\100\0\u568d\6\103\0\56\6"+
    "\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0"+
    "\12\7\1\0\37\6\2\7\120\6\2\7\45\0\11\6\2\0\147\6"+
    "\2\0\100\6\5\0\2\6\1\0\1\6\1\0\5\6\30\0\20\6"+
    "\1\7\3\6\1\7\4\6\1\7\27\6\5\7\4\0\1\7\13\0"+
    "\1\6\7\0\64\6\14\0\2\7\62\6\22\7\12\0\12\7\6\0"+
    "\22\7\6\6\3\0\1\6\1\0\2\6\13\7\34\6\10\7\2\0"+
    "\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6"+
    "\12\7\6\0\5\6\1\7\12\6\12\7\5\6\1\0\51\6\16\7"+
    "\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0"+
    "\1\6\3\7\62\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7"+
    "\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6"+
    "\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0"+
    "\7\6\1\0\53\6\1\0\16\6\6\0\163\6\10\7\1\0\2\7"+
    "\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6"+
    "\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6"+
    "\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6"+
    "\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6"+
    "\3\0\20\7\20\0\20\7\3\0\2\6\30\0\3\6\31\0\1\6"+
    "\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7"+
    "\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6"+
    "\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6"+
    "\22\0\3\7\4\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6"+
    "\1\0\17\6\2\0\16\6\42\0\173\6\105\0\65\6\210\0\1\7"+
    "\202\0\35\6\3\0\61\6\17\0\1\7\37\0\40\6\15\0\36\6"+
    "\5\0\46\6\5\7\5\0\36\6\2\0\44\6\4\0\10\6\1\0"+
    "\5\6\52\0\236\6\2\0\12\7\6\0\44\6\4\0\44\6\4\0"+
    "\50\6\10\0\64\6\14\0\13\6\1\0\17\6\1\0\7\6\1\0"+
    "\2\6\1\0\13\6\1\0\17\6\1\0\7\6\1\0\2\6\103\0"+
    "\u0137\6\11\0\26\6\12\0\10\6\30\0\6\6\1\0\52\6\1\0"+
    "\11\6\105\0\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0"+
    "\1\6\2\0\27\6\12\0\27\6\11\0\37\6\101\0\23\6\1\0"+
    "\2\6\12\0\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0"+
    "\1\6\3\7\1\0\2\7\5\0\4\7\4\6\1\0\3\6\1\0"+
    "\35\6\2\0\3\7\4\0\1\7\40\0\35\6\3\0\35\6\43\0"+
    "\10\6\1\0\34\6\2\7\31\0\66\6\12\0\26\6\12\0\23\6"+
    "\15\0\22\6\156\0\111\6\67\0\63\6\15\0\63\6\15\0\44\6"+
    "\4\7\10\0\12\7\u0146\0\52\6\1\0\2\7\3\0\2\6\113\0"+
    "\3\7\35\6\12\0\1\6\10\0\26\6\13\7\37\0\22\6\4\7"+
    "\52\0\25\6\33\0\27\6\11\0\3\7\65\6\17\7\37\0\13\7"+
    "\2\6\2\7\1\6\11\0\4\7\55\6\13\7\2\0\1\7\4\0"+
    "\1\7\12\0\1\7\2\0\31\6\7\0\12\7\6\0\3\7\44\6"+
    "\16\7\1\0\12\7\4\0\1\6\2\7\1\6\10\0\43\6\1\7"+
    "\2\0\1\6\11\0\3\7\60\6\16\7\4\6\4\0\4\7\1\0"+
    "\14\7\1\6\1\0\1\6\43\0\22\6\1\0\31\6\14\7\6\0"+
    "\1\7\2\6\1\7\76\0\7\6\1\0\1\6\1\0\4\6\1\0"+
    "\17\6\1\0\12\6\7\0\57\6\14\7\5\0\12\7\6\0\4\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\1\0\2\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\2\0\1\6\6\0\1\7\5\0\5\6\2\7\2\0\7\7\3\0"+
    "\5\7\213\0\65\6\22\7\4\6\5\0\12\7\4\0\1\7\3\6"+
    "\36\0\60\6\24\7\2\6\1\0\1\6\10\0\12\7\246\0\57\6"+
    "\7\7\2\0\11\7\27\0\4\6\2\7\42\0\60\6\21\7\3\0"+
    "\1\6\13\0\12\7\46\0\53\6\15\7\1\6\7\0\12\7\66\0"+
    "\33\6\2\0\17\7\4\0\12\7\6\0\7\6\271\0\54\6\17\7"+
    "\145\0\100\6\12\7\25\0\10\6\2\0\1\6\2\0\10\6\1\0"+
    "\2\6\1\0\30\6\6\7\1\0\2\7\2\0\4\7\1\6\1\7"+
    "\1\6\2\7\14\0\12\7\106\0\10\6\2\0\47\6\7\7\2\0"+
    "\7\7\1\6\1\0\1\6\1\7\33\0\1\6\12\7\50\6\7\7"+
    "\1\6\4\7\10\0\1\7\10\0\1\6\13\7\56\6\20\7\3\0"+
    "\1\6\22\0\111\6\u0107\0\11\6\1\0\45\6\10\7\1\0\10\7"+
    "\1\6\17\0\12\7\30\0\36\6\2\0\26\7\1\0\16\7\111\0"+
    "\7\6\1\0\2\6\1\0\46\6\6\7\3\0\1\7\1\0\2\7"+
    "\1\0\7\7\1\6\1\7\10\0\12\7\6\0\6\6\1\0\2\6"+
    "\1\0\40\6\5\7\1\0\2\7\1\0\5\7\1\6\7\0\12\7"+
    "\u0136\0\23\6\4\7\11\0\2\7\1\6\1\7\15\6\1\0\42\6"+
    "\7\7\3\0\5\7\15\0\12\7\126\0\1\6\54\0\4\6\37\0"+
    "\u039a\6\146\0\157\6\21\0\304\6\u0a4c\0\141\6\17\0\u0430\6\21\7"+
    "\6\6\17\7\u0faa\0\u0247\6\u21b9\0\u0239\6\7\0\37\6\1\0\12\7"+
    "\6\0\117\6\1\0\12\7\6\0\36\6\2\0\5\7\13\0\60\6"+
    "\7\7\11\0\4\6\14\0\12\7\11\0\25\6\5\0\23\6\u02b0\0"+
    "\100\6\200\0\113\6\4\0\1\7\1\6\67\7\7\0\4\7\15\6"+
    "\100\0\2\6\1\0\1\6\1\7\13\0\2\7\16\0\u17f8\6\10\0"+
    "\u04d6\6\52\0\11\6\u22e7\0\4\6\1\0\7\6\1\0\2\6\1\0"+
    "\u0123\6\17\0\1\6\35\0\3\6\2\0\1\6\16\0\4\6\10\0"+
    "\u018c\6\u0904\0\153\6\5\0\15\6\3\0\11\6\7\0\12\6\3\0"+
    "\2\7\1\0\4\7\u125c\0\56\7\2\0\27\7\u021e\0\5\7\3\0"+
    "\26\7\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0"+
    "\107\6\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0"+
    "\14\6\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0"+
    "\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0"+
    "\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u0200\0"+
    "\67\7\4\0\62\7\10\0\1\7\16\0\1\7\26\0\5\7\1\0"+
    "\17\7\u0450\0\37\6\6\0\6\6\325\0\7\7\1\0\21\7\2\0"+
    "\7\7\1\0\2\7\1\0\5\7\5\0\76\6\41\0\1\7\160\0"+
    "\55\6\3\0\7\7\7\6\2\0\12\7\4\0\1\6\u0141\0\36\6"+
    "\1\7\21\0\54\6\16\7\5\0\1\6\u01d0\0\34\6\16\7\u02e6\0"+
    "\7\6\1\0\4\6\1\0\2\6\1\0\17\6\1\0\305\6\13\0"+
    "\7\7\51\0\104\6\7\7\1\6\4\0\12\7\u0356\0\1\6\u014f\0"+
    "\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0"+
    "\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0"+
    "\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0"+
    "\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0"+
    "\3\6\1\0\5\6\1\0\21\6\u0d34\0\12\7\u0406\0\ua6e0\6\40\0"+
    "\u103a\6\6\0\336\6\2\0\u1682\6\16\0\u1d31\6\u0c1f\0\u021e\6\u05e2\0"+
    "\u134b\6\5\0\u1060\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udc5b\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\20\5\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\2\1\1\40\3\1\1\2\1\0\1\41\1\42"+
    "\1\43\1\44\1\6\1\0\3\43\2\44\2\0\1\45"+
    "\1\46\1\0\30\5\1\47\1\5\1\50\13\5\1\51"+
    "\1\52\1\0\1\53\1\0\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\3\1\1\66"+
    "\3\1\1\0\1\43\2\6\2\43\1\44\1\0\1\67"+
    "\1\0\13\5\1\70\16\5\1\71\2\5\1\72\4\5"+
    "\1\73\12\5\1\74\1\0\1\75\2\0\1\76\2\0"+
    "\1\6\2\43\1\0\3\5\1\77\7\5\1\100\1\5"+
    "\1\101\1\5\1\102\4\5\1\103\1\104\1\105\1\106"+
    "\2\5\1\107\14\5\1\110\1\5\1\111\1\5\1\112"+
    "\2\0\1\6\2\43\1\0\1\5\1\113\4\5\1\114"+
    "\1\115\2\5\1\116\1\5\1\117\1\120\1\5\1\121"+
    "\10\5\1\122\1\123\5\5\1\124\2\0\1\6\2\43"+
    "\1\0\2\5\1\125\2\5\1\126\1\5\1\127\1\130"+
    "\2\5\1\131\2\5\1\132\1\5\1\133\5\5\1\134"+
    "\1\5\1\0\1\6\2\43\1\0\1\5\1\135\4\5"+
    "\1\136\3\5\1\137\1\140\1\141\1\5\1\142\1\5"+
    "\1\6\2\43\1\0\1\143\1\144\2\5\1\145\4\5"+
    "\1\146\1\6\2\43\1\0\1\5\1\147\1\5\1\150"+
    "\1\5\1\151\1\6\2\43\1\0\1\5\1\152\1\153"+
    "\1\0\2\43\1\5\1\0\2\43\1\154\1\0\2\43"+
    "\1\0\2\43\1\0\2\43\1\0\2\43\1\0\1\43"+
    "\1\44\1\0\5\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\115\0\232\0\347\0\u0134\0\347\0\u0181\0\u01ce"+
    "\0\u021b\0\u0268\0\u02b5\0\u0302\0\u034f\0\347\0\347\0\u039c"+
    "\0\u03e9\0\u0436\0\u0483\0\u04d0\0\u051d\0\u056a\0\u05b7\0\u0604"+
    "\0\u0651\0\u069e\0\u06eb\0\u0738\0\u0785\0\u07d2\0\u081f\0\347"+
    "\0\347\0\347\0\347\0\347\0\347\0\347\0\347\0\347"+
    "\0\u086c\0\u08b9\0\u0906\0\u0953\0\347\0\347\0\u09a0\0\u09ed"+
    "\0\u0a3a\0\u0a87\0\u0ad4\0\u0b21\0\u0b6e\0\u0bbb\0\347\0\u0c08"+
    "\0\u0c55\0\u0ca2\0\u0cef\0\u0d3c\0\347\0\347\0\u0d89\0\u0dd6"+
    "\0\347\0\u0e23\0\u0e70\0\u0ebd\0\u0f0a\0\347\0\u0f57\0\u0fa4"+
    "\0\u0ff1\0\347\0\347\0\u103e\0\u108b\0\u10d8\0\u1125\0\u1172"+
    "\0\u11bf\0\u120c\0\u1259\0\u12a6\0\u12f3\0\u1340\0\u138d\0\u13da"+
    "\0\u1427\0\u1474\0\u14c1\0\u150e\0\u155b\0\u15a8\0\u15f5\0\u1642"+
    "\0\u168f\0\u16dc\0\u1729\0\u1776\0\u021b\0\u17c3\0\u1810\0\u185d"+
    "\0\u18aa\0\u18f7\0\u1944\0\u1991\0\u19de\0\u1a2b\0\u1a78\0\u1ac5"+
    "\0\u1b12\0\u1b5f\0\347\0\347\0\u1bac\0\347\0\u1bf9\0\347"+
    "\0\347\0\347\0\347\0\347\0\347\0\347\0\347\0\347"+
    "\0\347\0\u1c46\0\u1c93\0\u1ce0\0\347\0\u1d2d\0\u1d7a\0\u1dc7"+
    "\0\u1e14\0\347\0\u1e61\0\u1eae\0\u1efb\0\u1f48\0\u1f95\0\u1fe2"+
    "\0\347\0\u202f\0\u207c\0\u20c9\0\u2116\0\u2163\0\u21b0\0\u21fd"+
    "\0\u224a\0\u2297\0\u22e4\0\u2331\0\u237e\0\u021b\0\u23cb\0\u2418"+
    "\0\u2465\0\u24b2\0\u24ff\0\u254c\0\u2599\0\u25e6\0\u2633\0\u2680"+
    "\0\u26cd\0\u271a\0\u2767\0\u27b4\0\u021b\0\u2801\0\u284e\0\u289b"+
    "\0\u28e8\0\u2935\0\u2982\0\u29cf\0\u021b\0\u2a1c\0\u2a69\0\u2ab6"+
    "\0\u2b03\0\u2b50\0\u2b9d\0\u2bea\0\u2c37\0\u2c84\0\u2cd1\0\347"+
    "\0\u2d1e\0\347\0\u2d6b\0\u1d7a\0\347\0\u2db8\0\u2e05\0\u2e52"+
    "\0\u2e9f\0\u2eec\0\u2f39\0\u2f86\0\u2fd3\0\u3020\0\u021b\0\u306d"+
    "\0\u30ba\0\u3107\0\u3154\0\u31a1\0\u31ee\0\u323b\0\u021b\0\u3288"+
    "\0\u021b\0\u32d5\0\u021b\0\u3322\0\u336f\0\u33bc\0\u3409\0\u021b"+
    "\0\u021b\0\u021b\0\u021b\0\u3456\0\u34a3\0\u021b\0\u34f0\0\u353d"+
    "\0\u358a\0\u35d7\0\u3624\0\u3671\0\u36be\0\u370b\0\u3758\0\u37a5"+
    "\0\u37f2\0\u383f\0\u021b\0\u388c\0\u021b\0\u38d9\0\347\0\u3926"+
    "\0\u3973\0\u39c0\0\u3a0d\0\u3a5a\0\u3aa7\0\u3af4\0\u021b\0\u3b41"+
    "\0\u3b8e\0\u3bdb\0\u3c28\0\u021b\0\u021b\0\u3c75\0\u3cc2\0\u3d0f"+
    "\0\u3d5c\0\u021b\0\u021b\0\u3da9\0\u021b\0\u3df6\0\u3e43\0\u3e90"+
    "\0\u3edd\0\u3f2a\0\u3f77\0\u3fc4\0\u4011\0\u021b\0\u405e\0\u40ab"+
    "\0\u40f8\0\u4145\0\u4192\0\u41df\0\u021b\0\u422c\0\u4279\0\u42c6"+
    "\0\u4313\0\u4360\0\u43ad\0\u43fa\0\u4447\0\u021b\0\u4494\0\u44e1"+
    "\0\u021b\0\u452e\0\u021b\0\u021b\0\u457b\0\u45c8\0\u021b\0\u4615"+
    "\0\u4662\0\u021b\0\u46af\0\u021b\0\u46fc\0\u4749\0\u4796\0\u47e3"+
    "\0\u4830\0\u021b\0\u487d\0\u0c55\0\u48ca\0\u4917\0\u4964\0\u49b1"+
    "\0\u49fe\0\u021b\0\u4a4b\0\u4a98\0\u4ae5\0\u4b32\0\u021b\0\u4b7f"+
    "\0\u4bcc\0\u4c19\0\u021b\0\u021b\0\u021b\0\u4c66\0\u021b\0\u4cb3"+
    "\0\u4d00\0\u4d4d\0\u4d9a\0\u4de7\0\u021b\0\u021b\0\u4e34\0\u4e81"+
    "\0\u021b\0\u4ece\0\u4f1b\0\u4f68\0\u4fb5\0\u021b\0\u5002\0\u504f"+
    "\0\u509c\0\u50e9\0\u5136\0\u021b\0\u5183\0\u021b\0\u51d0\0\u021b"+
    "\0\u521d\0\u526a\0\u52b7\0\u5304\0\u5351\0\u021b\0\u021b\0\u539e"+
    "\0\u53eb\0\u5438\0\u5485\0\u54d2\0\u551f\0\u556c\0\u021b\0\u55b9"+
    "\0\u5606\0\u5653\0\u56a0\0\u56ed\0\u573a\0\u5787\0\u57d4\0\u5821"+
    "\0\u586e\0\u58bb\0\u5908\0\u5955\0\u59a2\0\u59a2\0\u59ef\0\u5a3c"+
    "\0\u5a89\0\u5ad6\0\u5b23\0\u5b70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\11\1\26\1\27\1\30\3\11\1\31\1\11\1\32"+
    "\1\11\1\33\1\11\1\34\1\35\1\36\1\37\1\11"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\5\13\1\11\1\4"+
    "\1\6\1\4\1\65\1\66\1\4\21\65\1\67\1\65"+
    "\1\70\66\65\1\71\1\66\1\4\22\71\1\4\1\72"+
    "\66\71\117\0\1\6\116\0\1\73\1\74\62\0\1\75"+
    "\114\0\1\76\32\0\13\11\1\0\1\11\4\0\30\11"+
    "\25\0\6\11\2\0\1\11\10\0\1\77\1\100\1\101"+
    "\1\102\1\0\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\13\0\1\101\1\110\6\0\1\106\1\102\1\106\33\0"+
    "\1\103\2\105\1\100\1\105\14\0\2\13\1\101\2\0"+
    "\3\13\1\106\1\107\1\110\13\0\1\101\1\110\6\0"+
    "\1\106\1\0\1\106\33\0\5\13\14\0\2\107\3\0"+
    "\3\107\1\0\1\111\62\0\5\107\27\0\1\112\44\0"+
    "\1\113\13\0\1\114\16\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\115\26\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\116\1\11\1\117"+
    "\4\11\1\120\14\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\121\7\11\1\122"+
    "\1\123\1\11\1\124\7\11\1\125\1\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\126\7\11\1\127\13\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\130\17\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\131\5\11\1\132\1\133\4\11\1\134\13\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\135\21\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\136\1\11"+
    "\1\137\6\11\1\140\7\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\141\7\11\1\142"+
    "\5\11\1\143\11\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\144\7\11\1\145"+
    "\1\146\5\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\147\1\11\1\150\17\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\151\5\11\1\152\1\153\5\11\1\154\12\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\155\3\11\1\156\11\11\1\157\11\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\160\21\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\161\21\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\14\11\1\162\13\11\25\0\6\11\2\0\1\11\70\0"+
    "\1\163\114\0\1\164\1\165\113\0\1\166\1\0\1\167"+
    "\112\0\1\170\122\0\1\171\106\0\1\172\6\0\1\173"+
    "\105\0\1\174\7\0\1\175\104\0\1\176\10\0\1\177"+
    "\103\0\1\200\114\0\1\201\24\0\1\65\2\0\21\65"+
    "\1\0\1\65\1\0\66\65\2\0\1\4\112\0\1\4"+
    "\2\0\5\4\1\202\4\4\2\202\1\203\25\4\1\204"+
    "\36\4\1\202\2\203\1\4\1\203\1\4\30\0\1\205"+
    "\67\0\1\4\2\0\5\4\1\206\4\4\2\206\1\207"+
    "\4\4\3\71\1\4\1\71\1\4\2\71\4\4\1\71"+
    "\4\4\1\210\2\4\1\71\33\4\1\206\2\207\1\4"+
    "\1\207\1\4\3\0\1\73\1\5\1\6\112\73\5\74"+
    "\1\211\107\74\10\0\1\77\1\100\1\212\2\0\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\13\0\1\212\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\1\103\2\105\1\100"+
    "\1\105\14\0\2\100\3\0\3\100\1\106\1\107\1\110"+
    "\14\0\1\110\6\0\1\106\1\0\1\106\33\0\5\100"+
    "\14\0\1\213\1\214\2\0\5\214\1\0\1\214\4\0"+
    "\2\214\3\0\1\214\2\0\1\214\6\0\1\214\1\0"+
    "\1\214\33\0\6\214\13\0\1\215\1\100\1\212\2\0"+
    "\3\215\1\106\1\107\1\110\13\0\1\212\1\110\6\0"+
    "\1\106\1\0\1\106\33\0\3\215\1\100\1\215\14\0"+
    "\1\105\1\100\1\212\2\0\3\105\1\106\1\107\1\110"+
    "\13\0\1\212\1\110\6\0\1\106\1\0\1\106\33\0"+
    "\3\105\1\100\1\105\14\0\1\216\1\100\1\212\2\0"+
    "\3\216\1\106\1\107\1\110\13\0\1\212\1\110\6\0"+
    "\1\106\1\0\1\106\33\0\3\216\1\100\1\216\14\0"+
    "\2\107\3\0\3\107\1\106\1\0\1\110\14\0\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\5\107\14\0\2\217"+
    "\3\0\3\217\3\0\1\220\55\0\1\220\2\0\5\217"+
    "\25\0\1\221\111\0\1\222\104\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\223\25\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\224\17\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\6\11\1\225\21\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\226\24\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\227\3\11\1\230\23\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\231"+
    "\16\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\232\21\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\23\11\1\233"+
    "\4\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\234\12\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\235\12\11"+
    "\1\236\2\11\1\237\11\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\240\10\11"+
    "\1\241\12\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\3\11\1\242\24\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\243\1\244\24\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\245\16\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\246\27\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\247\27\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\11\11\1\250"+
    "\16\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\251\25\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\16\11\1\252"+
    "\11\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\253\24\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\254"+
    "\24\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\26\11\1\255\1\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\256"+
    "\20\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\257\1\260\24\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\23\11"+
    "\1\261\4\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\262\11\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\21\11"+
    "\1\263\6\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\7\11\1\264\20\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\265\23\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\266\21\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\11\11"+
    "\1\267\16\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\270\22\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\6\11"+
    "\1\271\6\11\1\272\12\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\273\26\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\274\24\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\275\5\11"+
    "\1\276\12\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\277\12\11\25\0\6\11"+
    "\2\0\1\11\70\0\1\300\1\301\113\0\1\302\34\0"+
    "\1\203\4\0\3\203\64\0\3\203\1\0\1\203\14\0"+
    "\1\4\4\0\3\4\64\0\3\4\1\0\1\4\14\0"+
    "\1\303\114\0\1\304\4\0\3\304\5\0\1\305\56\0"+
    "\3\304\1\0\1\304\14\0\1\306\4\0\3\306\5\0"+
    "\1\305\56\0\3\306\1\0\1\306\14\0\2\307\2\0"+
    "\5\307\1\0\1\307\4\0\2\307\3\0\1\307\2\0"+
    "\1\307\6\0\1\307\1\0\1\307\33\0\6\307\3\0"+
    "\4\74\1\6\1\211\107\74\10\0\1\213\1\214\1\212"+
    "\1\0\5\214\1\0\1\214\4\0\2\214\3\0\1\214"+
    "\1\0\1\212\1\214\6\0\1\214\1\0\1\214\33\0"+
    "\6\214\13\0\2\310\1\212\1\0\5\310\1\0\1\310"+
    "\4\0\2\310\3\0\1\310\1\0\1\212\1\310\6\0"+
    "\1\310\1\0\1\310\33\0\6\310\13\0\1\311\1\100"+
    "\1\212\2\0\3\311\1\106\1\107\1\110\13\0\1\212"+
    "\1\110\6\0\1\106\1\0\1\106\33\0\3\311\1\100"+
    "\1\311\14\0\1\312\1\100\1\212\2\0\3\312\1\106"+
    "\1\107\1\110\13\0\1\212\1\110\6\0\1\106\1\0"+
    "\1\106\33\0\3\312\1\100\1\312\14\0\2\217\3\0"+
    "\3\217\1\106\25\0\1\106\1\0\1\106\33\0\5\217"+
    "\14\0\2\217\3\0\3\217\64\0\5\217\111\0\1\313"+
    "\15\0\13\11\1\0\1\11\4\0\3\11\1\314\24\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\1\315\27\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\7\11\1\316\20\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\317\17\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\320\24\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\321\12\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\322\22\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\323\23\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\324\17\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\325\24\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\326\16\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\327\17\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\330\21\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\331\25\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\332\11\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\333\17\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\334\22\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\335\1\336\24\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\337\25\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\340\23\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\24\11\1\341\3\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\342\17\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\22\11\1\343\5\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\344\17\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\345\12\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\7\11\1\346\20\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\347\24\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\350\17\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\6\11\1\351\1\352"+
    "\20\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\11\1\353\26\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\354\27\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\237\25\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\355\27\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\356\27\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\357\15\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\360\24\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\25\11\1\361\2\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11"+
    "\1\362\20\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\363\21\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\364"+
    "\27\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\17\11\1\365\10\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\7\11\1\366"+
    "\20\11\25\0\6\11\2\0\1\11\70\0\1\367\34\0"+
    "\1\370\131\0\1\305\77\0\2\371\2\0\5\371\1\0"+
    "\1\371\4\0\2\371\3\0\1\371\2\0\1\371\6\0"+
    "\1\371\1\0\1\371\33\0\6\371\13\0\2\372\1\212"+
    "\1\0\5\372\1\0\1\372\4\0\2\372\3\0\1\372"+
    "\1\0\1\212\1\372\6\0\1\372\1\0\1\372\33\0"+
    "\6\372\13\0\1\373\1\100\1\212\2\0\3\373\1\106"+
    "\1\107\1\110\13\0\1\212\1\110\6\0\1\106\1\0"+
    "\1\106\33\0\3\373\1\100\1\373\14\0\1\374\1\100"+
    "\1\212\2\0\3\374\1\106\1\107\1\110\13\0\1\212"+
    "\1\110\6\0\1\106\1\0\1\106\33\0\3\374\1\100"+
    "\1\374\112\0\1\375\14\0\13\11\1\0\1\11\4\0"+
    "\4\11\1\376\23\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\12\11\1\377\15\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u0100\17\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\15\11\1\u0101\12\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\u0102\22\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\14\11\1\u0103\13\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\3\11\1\u0104\24\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u0105\23\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\5\11\1\u0106\22\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u0107\25\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\26\11\1\u0108\1\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\4\11\1\u0109\23\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\14\11\1\u010a\13\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\u010b\24\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\15\11\1\u010c\12\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\u010d\25\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u010e\16\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\25\11\1\u010f\2\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\u0110\27\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\4\11\1\u0111\23\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\4\11"+
    "\1\u0112\23\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\10\11\1\u0113\17\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\7\11"+
    "\1\u0114\20\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\u0115\11\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\u0116\24\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\7\11\1\u0117\20\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u0118"+
    "\27\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u0119\17\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\1\u011a\27\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u011b\12\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u011c\24\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u011d\17\11\25\0\6\11\2\0\1\11"+
    "\10\0\1\u011e\114\0\2\u011f\2\0\5\u011f\1\0\1\u011f"+
    "\4\0\2\u011f\3\0\1\u011f\2\0\1\u011f\6\0\1\u011f"+
    "\1\0\1\u011f\33\0\6\u011f\13\0\2\u0120\1\212\1\0"+
    "\5\u0120\1\0\1\u0120\4\0\2\u0120\3\0\1\u0120\1\0"+
    "\1\212\1\u0120\6\0\1\u0120\1\0\1\u0120\33\0\6\u0120"+
    "\13\0\1\u0121\1\100\1\212\2\0\3\u0121\1\106\1\107"+
    "\1\110\13\0\1\212\1\110\6\0\1\106\1\0\1\106"+
    "\33\0\3\u0121\1\100\1\u0121\14\0\1\u0122\1\100\1\212"+
    "\2\0\3\u0122\1\106\1\107\1\110\13\0\1\212\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\3\u0122\1\100\1\u0122"+
    "\111\0\1\u0123\15\0\13\11\1\0\1\11\4\0\1\u0124"+
    "\27\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\1\u0125\27\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u0126\22\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u0127\24\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\4\11\1\u0128\23\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\14\11\1\u0129\13\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\15\11\1\u012a\12\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\u012b\25\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\u012c\16\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\11\11\1\u012d\16\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\17\11\1\u012e\10\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u012f\17\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\11\11\1\u0130\16\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\21\11\1\u0131\6\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\u0132\24\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\22\11\1\u0133\5\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\10\11\1\u0134\17\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\7\11\1\u0135\20\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\7\11\1\u0136\20\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\24\11\1\u0137\3\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u0138\22\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\3\11\1\u0139\24\11\25\0\6\11\2\0\1\11"+
    "\6\0\13\11\1\0\1\11\4\0\5\11\1\u013a\22\11"+
    "\25\0\6\11\2\0\1\11\6\0\13\11\1\0\1\11"+
    "\4\0\15\11\1\u013b\12\11\25\0\6\11\2\0\1\11"+
    "\111\0\1\4\13\0\2\u013c\2\0\5\u013c\1\0\1\u013c"+
    "\4\0\2\u013c\3\0\1\u013c\2\0\1\u013c\6\0\1\u013c"+
    "\1\0\1\u013c\33\0\6\u013c\13\0\2\u013d\1\212\1\0"+
    "\5\u013d\1\0\1\u013d\4\0\2\u013d\3\0\1\u013d\1\0"+
    "\1\212\1\u013d\6\0\1\u013d\1\0\1\u013d\33\0\6\u013d"+
    "\13\0\1\u013e\1\100\1\212\2\0\3\u013e\1\106\1\107"+
    "\1\110\13\0\1\212\1\110\6\0\1\106\1\0\1\106"+
    "\33\0\3\u013e\1\100\1\u013e\14\0\1\u013f\1\100\1\212"+
    "\2\0\3\u013f\1\106\1\107\1\110\13\0\1\212\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\3\u013f\1\100\1\u013f"+
    "\113\0\1\u0140\13\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\u0141\22\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\u0142\16\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\21\11"+
    "\1\u0143\6\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\6\11\1\u0144\21\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\10\11"+
    "\1\u0145\17\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\16\11\1\u0146\11\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\u0147\25\11\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\5\11\1\u0148\22\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\1\u0149"+
    "\27\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\10\11\1\u014a\17\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u014b"+
    "\24\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\13\11\1\u014c\14\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u014d"+
    "\17\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u014e\24\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u014f"+
    "\17\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\u0150\20\11\25\0\6\11\2\0"+
    "\1\11\10\0\2\u0151\1\212\1\0\5\u0151\1\0\1\u0151"+
    "\4\0\2\u0151\3\0\1\u0151\1\0\1\212\1\u0151\6\0"+
    "\1\u0151\1\0\1\u0151\33\0\6\u0151\13\0\1\u0152\1\100"+
    "\1\212\2\0\3\u0152\1\106\1\107\1\110\13\0\1\212"+
    "\1\110\6\0\1\106\1\0\1\106\33\0\3\u0152\1\100"+
    "\1\u0152\14\0\1\u0153\1\100\1\212\2\0\3\u0153\1\106"+
    "\1\107\1\110\13\0\1\212\1\110\6\0\1\106\1\0"+
    "\1\106\33\0\3\u0153\1\100\1\u0153\21\0\1\u0154\105\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\u0155\24\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\23\11\1\u0156\4\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\u0157\16\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u0158\16\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u0159\17\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u015a\17\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\5\11\1\u015b\22\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\11\11\1\u015c\16\11\25\0\6\11\2\0\1\11\6\0"+
    "\13\11\1\0\1\11\4\0\10\11\1\u015d\17\11\25\0"+
    "\6\11\2\0\1\11\6\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\u015e\17\11\25\0\6\11\2\0\1\11\10\0"+
    "\2\u015f\1\212\1\0\5\u015f\1\0\1\u015f\4\0\2\u015f"+
    "\3\0\1\u015f\1\0\1\212\1\u015f\6\0\1\u015f\1\0"+
    "\1\u015f\33\0\6\u015f\13\0\1\u0160\1\100\1\212\2\0"+
    "\3\u0160\1\106\1\107\1\110\13\0\1\212\1\110\6\0"+
    "\1\106\1\0\1\106\33\0\3\u0160\1\100\1\u0160\14\0"+
    "\1\u0161\1\100\1\212\2\0\3\u0161\1\106\1\107\1\110"+
    "\13\0\1\212\1\110\6\0\1\106\1\0\1\106\33\0"+
    "\3\u0161\1\100\1\u0161\114\0\1\u0162\12\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\u0163\12\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\3\11\1\u0164"+
    "\24\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\u0165\21\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\10\11\1\u0166"+
    "\17\11\25\0\6\11\2\0\1\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\u0167\24\11\25\0\6\11\2\0"+
    "\1\11\6\0\13\11\1\0\1\11\4\0\17\11\1\u0168"+
    "\10\11\25\0\6\11\2\0\1\11\10\0\2\u0169\1\212"+
    "\1\0\5\u0169\1\0\1\u0169\4\0\2\u0169\3\0\1\u0169"+
    "\1\0\1\212\1\u0169\6\0\1\u0169\1\0\1\u0169\33\0"+
    "\6\u0169\13\0\1\u016a\1\100\1\212\2\0\3\u016a\1\106"+
    "\1\107\1\110\13\0\1\212\1\110\6\0\1\106\1\0"+
    "\1\106\33\0\3\u016a\1\100\1\u016a\14\0\1\u016b\1\100"+
    "\1\212\2\0\3\u016b\1\106\1\107\1\110\13\0\1\212"+
    "\1\110\6\0\1\106\1\0\1\106\33\0\3\u016b\1\100"+
    "\1\u016b\111\0\1\u016c\15\0\13\11\1\0\1\11\4\0"+
    "\27\11\1\u016d\25\0\6\11\2\0\1\11\6\0\13\11"+
    "\1\0\1\11\4\0\21\11\1\u016e\6\11\25\0\6\11"+
    "\2\0\1\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\u016f\25\11\25\0\6\11\2\0\1\11\10\0\2\u0170"+
    "\1\212\1\0\5\u0170\1\0\1\u0170\4\0\2\u0170\3\0"+
    "\1\u0170\1\0\1\212\1\u0170\6\0\1\u0170\1\0\1\u0170"+
    "\33\0\6\u0170\13\0\1\u0171\1\100\1\212\2\0\3\u0171"+
    "\1\106\1\107\1\110\13\0\1\212\1\110\6\0\1\106"+
    "\1\0\1\106\33\0\3\u0171\1\100\1\u0171\14\0\1\u0172"+
    "\1\100\1\212\2\0\3\u0172\1\106\1\107\1\110\13\0"+
    "\1\212\1\110\6\0\1\106\1\0\1\106\33\0\3\u0172"+
    "\1\100\1\u0172\113\0\1\212\13\0\13\11\1\0\1\11"+
    "\4\0\10\11\1\u0173\17\11\25\0\6\11\2\0\1\11"+
    "\10\0\2\u0174\1\212\1\0\5\u0174\1\0\1\u0174\4\0"+
    "\2\u0174\3\0\1\u0174\1\0\1\212\1\u0174\6\0\1\u0174"+
    "\1\0\1\u0174\33\0\6\u0174\13\0\1\u0175\1\100\1\212"+
    "\2\0\3\u0175\1\106\1\107\1\110\13\0\1\212\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\3\u0175\1\100\1\u0175"+
    "\14\0\1\u0176\1\100\1\212\2\0\3\u0176\1\106\1\107"+
    "\1\110\13\0\1\212\1\110\6\0\1\106\1\0\1\106"+
    "\33\0\3\u0176\1\100\1\u0176\12\0\13\11\1\0\1\11"+
    "\4\0\17\11\1\u0177\10\11\25\0\6\11\2\0\1\11"+
    "\10\0\2\u0178\1\212\1\0\5\u0178\1\0\1\u0178\4\0"+
    "\2\u0178\3\0\1\u0178\1\0\1\212\1\u0178\6\0\1\u0178"+
    "\1\0\1\u0178\33\0\6\u0178\13\0\1\u0179\1\100\1\212"+
    "\2\0\3\u0179\1\106\1\107\1\110\13\0\1\212\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\3\u0179\1\100\1\u0179"+
    "\14\0\1\u017a\1\100\1\212\2\0\3\u017a\1\106\1\107"+
    "\1\110\13\0\1\212\1\110\6\0\1\106\1\0\1\106"+
    "\33\0\3\u017a\1\100\1\u017a\14\0\2\u017b\1\212\1\0"+
    "\5\u017b\1\0\1\u017b\4\0\2\u017b\3\0\1\u017b\1\0"+
    "\1\212\1\u017b\6\0\1\u017b\1\0\1\u017b\33\0\6\u017b"+
    "\13\0\1\u017c\1\100\1\212\2\0\3\u017c\1\106\1\107"+
    "\1\110\13\0\1\212\1\110\6\0\1\106\1\0\1\106"+
    "\33\0\3\u017c\1\100\1\u017c\14\0\1\u017d\1\100\1\212"+
    "\2\0\3\u017d\1\106\1\107\1\110\13\0\1\212\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\3\u017d\1\100\1\u017d"+
    "\14\0\2\u017e\1\212\1\0\5\u017e\1\0\1\u017e\4\0"+
    "\2\u017e\3\0\1\u017e\1\0\1\212\1\u017e\6\0\1\u017e"+
    "\1\0\1\u017e\33\0\6\u017e\13\0\1\u017f\1\100\1\212"+
    "\2\0\3\u017f\1\106\1\107\1\110\13\0\1\212\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\3\u017f\1\100\1\u017f"+
    "\14\0\1\u0180\1\100\1\212\2\0\3\u0180\1\106\1\107"+
    "\1\110\13\0\1\212\1\110\6\0\1\106\1\0\1\106"+
    "\33\0\3\u0180\1\100\1\u0180\14\0\2\u0181\1\212\1\0"+
    "\5\u0181\1\0\1\u0181\4\0\2\u0181\3\0\1\u0181\1\0"+
    "\1\212\1\u0181\6\0\1\u0181\1\0\1\u0181\33\0\6\u0181"+
    "\13\0\1\u0182\1\100\1\212\2\0\3\u0182\1\106\1\107"+
    "\1\110\13\0\1\212\1\110\6\0\1\106\1\0\1\106"+
    "\33\0\3\u0182\1\100\1\u0182\14\0\1\u0183\1\100\1\212"+
    "\2\0\3\u0183\1\106\1\107\1\110\13\0\1\212\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\3\u0183\1\100\1\u0183"+
    "\14\0\2\u0184\1\212\1\0\5\u0184\1\0\1\u0184\4\0"+
    "\2\u0184\3\0\1\u0184\1\0\1\212\1\u0184\6\0\1\u0184"+
    "\1\0\1\u0184\33\0\6\u0184\13\0\1\u0185\1\100\1\212"+
    "\2\0\3\u0185\1\106\1\107\1\110\13\0\1\212\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\3\u0185\1\100\1\u0185"+
    "\14\0\1\u0186\1\100\1\212\2\0\3\u0186\1\106\1\107"+
    "\1\110\13\0\1\212\1\110\6\0\1\106\1\0\1\106"+
    "\33\0\3\u0186\1\100\1\u0186\14\0\2\u0187\1\212\1\0"+
    "\5\u0187\1\0\1\u0187\4\0\2\u0187\3\0\1\u0187\1\0"+
    "\1\212\1\u0187\6\0\1\u0187\1\0\1\u0187\33\0\6\u0187"+
    "\13\0\1\u0188\1\100\1\212\2\0\3\u0188\1\106\1\107"+
    "\1\110\13\0\1\212\1\110\6\0\1\106\1\0\1\106"+
    "\33\0\3\u0188\1\100\1\u0188\16\0\1\212\23\0\1\212"+
    "\66\0\1\u0189\1\100\1\212\2\0\3\u0189\1\106\1\107"+
    "\1\110\13\0\1\212\1\110\6\0\1\106\1\0\1\106"+
    "\33\0\3\u0189\1\100\1\u0189\14\0\1\u018a\1\100\1\212"+
    "\2\0\3\u018a\1\106\1\107\1\110\13\0\1\212\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\3\u018a\1\100\1\u018a"+
    "\14\0\1\u018b\1\100\1\212\2\0\3\u018b\1\106\1\107"+
    "\1\110\13\0\1\212\1\110\6\0\1\106\1\0\1\106"+
    "\33\0\3\u018b\1\100\1\u018b\14\0\1\u018c\1\100\1\212"+
    "\2\0\3\u018c\1\106\1\107\1\110\13\0\1\212\1\110"+
    "\6\0\1\106\1\0\1\106\33\0\3\u018c\1\100\1\u018c"+
    "\14\0\2\100\1\212\2\0\3\100\1\106\1\107\1\110"+
    "\13\0\1\212\1\110\6\0\1\106\1\0\1\106\33\0"+
    "\5\100\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23485];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\20\1\11\11"+
    "\4\1\2\11\10\1\1\11\4\1\1\0\2\11\2\1"+
    "\1\11\1\0\3\1\1\11\1\1\2\0\2\11\1\0"+
    "\46\1\2\11\1\0\1\11\1\0\12\11\3\1\1\11"+
    "\3\1\1\0\1\11\5\1\1\0\1\11\1\0\55\1"+
    "\1\11\1\0\1\11\2\0\1\11\2\0\3\1\1\0"+
    "\53\1\1\11\2\0\3\1\1\0\40\1\2\0\3\1"+
    "\1\0\30\1\1\0\3\1\1\0\23\1\1\0\15\1"+
    "\1\0\11\1\1\0\3\1\1\0\3\1\1\0\3\1"+
    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  /**
   * assumes correct representation of a long value for
   * specified radix in scanner buffer from <code>start</code>
   * to <code>end</code>
   */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3904) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return JavaToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            } 
            // fall through
          case 109: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 110: break;
          case 3: 
            { return JavaToken.DIV;
            } 
            // fall through
          case 111: break;
          case 4: 
            { return JavaToken.MULT;
            } 
            // fall through
          case 112: break;
          case 5: 
            { return JavaToken.IDENTIFIER;
            } 
            // fall through
          case 113: break;
          case 6: 
            { return JavaToken.INTEGER_LITERAL ;
            } 
            // fall through
          case 114: break;
          case 7: 
            { return JavaToken.DOT;
            } 
            // fall through
          case 115: break;
          case 8: 
            { return JavaToken.MINUS;
            } 
            // fall through
          case 116: break;
          case 9: 
            { yybegin(STRING);
            } 
            // fall through
          case 117: break;
          case 10: 
            { yybegin(CHARLITERAL);
            } 
            // fall through
          case 118: break;
          case 11: 
            { return JavaToken.AT;
            } 
            // fall through
          case 119: break;
          case 12: 
            { return JavaToken.LPAREN;
            } 
            // fall through
          case 120: break;
          case 13: 
            { return JavaToken.RPAREN;
            } 
            // fall through
          case 121: break;
          case 14: 
            { return JavaToken.LBRACE;
            } 
            // fall through
          case 122: break;
          case 15: 
            { return JavaToken.RBRACE;
            } 
            // fall through
          case 123: break;
          case 16: 
            { return JavaToken.LBRACK;
            } 
            // fall through
          case 124: break;
          case 17: 
            { return JavaToken.RBRACK;
            } 
            // fall through
          case 125: break;
          case 18: 
            { return JavaToken.SEMICOLON;
            } 
            // fall through
          case 126: break;
          case 19: 
            { return JavaToken.COMMA;
            } 
            // fall through
          case 127: break;
          case 20: 
            { return JavaToken.EQ;
            } 
            // fall through
          case 128: break;
          case 21: 
            { return JavaToken.GT;
            } 
            // fall through
          case 129: break;
          case 22: 
            { return JavaToken.LT;
            } 
            // fall through
          case 130: break;
          case 23: 
            { return JavaToken.NOT;
            } 
            // fall through
          case 131: break;
          case 24: 
            { return JavaToken.COMP;
            } 
            // fall through
          case 132: break;
          case 25: 
            { return JavaToken.QUESTION;
            } 
            // fall through
          case 133: break;
          case 26: 
            { return JavaToken.COLON;
            } 
            // fall through
          case 134: break;
          case 27: 
            { return JavaToken.AND;
            } 
            // fall through
          case 135: break;
          case 28: 
            { return JavaToken.OR;
            } 
            // fall through
          case 136: break;
          case 29: 
            { return JavaToken.PLUS;
            } 
            // fall through
          case 137: break;
          case 30: 
            { return JavaToken.XOR;
            } 
            // fall through
          case 138: break;
          case 31: 
            { return JavaToken.MOD;
            } 
            // fall through
          case 139: break;
          case 32: 
            { yybegin(YYINITIAL); return JavaToken.STRING_LITERAL;
            } 
            // fall through
          case 140: break;
          case 33: 
            { return JavaToken.DIVEQ;
            } 
            // fall through
          case 141: break;
          case 34: 
            { return JavaToken.MULTEQ;
            } 
            // fall through
          case 142: break;
          case 35: 
            { return JavaToken.INTEGER_LITERAL;
            } 
            // fall through
          case 143: break;
          case 36: 
            { return JavaToken.FLOATING_POINT_LITERAL;
            } 
            // fall through
          case 144: break;
          case 37: 
            { return JavaToken.MINUSMINUS;
            } 
            // fall through
          case 145: break;
          case 38: 
            { return JavaToken.MINUSEQ;
            } 
            // fall through
          case 146: break;
          case 39: 
            { return JavaToken.IF;
            } 
            // fall through
          case 147: break;
          case 40: 
            { return JavaToken.DO;
            } 
            // fall through
          case 148: break;
          case 41: 
            { return JavaToken.EQEQ;
            } 
            // fall through
          case 149: break;
          case 42: 
            { return JavaToken.GTEQ;
            } 
            // fall through
          case 150: break;
          case 43: 
            { return JavaToken.LTEQ;
            } 
            // fall through
          case 151: break;
          case 44: 
            { return JavaToken.NOTEQ;
            } 
            // fall through
          case 152: break;
          case 45: 
            { return JavaToken.COLONCOLON;
            } 
            // fall through
          case 153: break;
          case 46: 
            { return JavaToken.ANDEQ;
            } 
            // fall through
          case 154: break;
          case 47: 
            { return JavaToken.ANDAND;
            } 
            // fall through
          case 155: break;
          case 48: 
            { return JavaToken.OREQ;
            } 
            // fall through
          case 156: break;
          case 49: 
            { return JavaToken.OROR;
            } 
            // fall through
          case 157: break;
          case 50: 
            { return JavaToken.PLUSEQ;
            } 
            // fall through
          case 158: break;
          case 51: 
            { return JavaToken.PLUSPLUS;
            } 
            // fall through
          case 159: break;
          case 52: 
            { return JavaToken.XOREQ;
            } 
            // fall through
          case 160: break;
          case 53: 
            { return JavaToken.MODEQ;
            } 
            // fall through
          case 161: break;
          case 54: 
            { yybegin(YYINITIAL); return JavaToken.CHARACTER_LITERAL;
            } 
            // fall through
          case 162: break;
          case 55: 
            { return JavaToken.ELLIPSIS;
            } 
            // fall through
          case 163: break;
          case 56: 
            { return JavaToken.TRY;
            } 
            // fall through
          case 164: break;
          case 57: 
            { return JavaToken.NEW;
            } 
            // fall through
          case 165: break;
          case 58: 
            { return JavaToken.INT;
            } 
            // fall through
          case 166: break;
          case 59: 
            { return JavaToken.FOR;
            } 
            // fall through
          case 167: break;
          case 60: 
            { return JavaToken.RSHIFTEQ;
            } 
            // fall through
          case 168: break;
          case 61: 
            { return JavaToken.LSHIFTEQ;
            } 
            // fall through
          case 169: break;
          case 62: 
            { yybegin(YYINITIAL);
			                            return JavaToken.CHARACTER_LITERAL;
            } 
            // fall through
          case 170: break;
          case 63: 
            { return JavaToken.BYTE;
            } 
            // fall through
          case 171: break;
          case 64: 
            { return JavaToken.BOOLEAN_LITERAL;
            } 
            // fall through
          case 172: break;
          case 65: 
            { return JavaToken.THIS;
            } 
            // fall through
          case 173: break;
          case 66: 
            { return JavaToken.CASE;
            } 
            // fall through
          case 174: break;
          case 67: 
            { return JavaToken.CHAR;
            } 
            // fall through
          case 175: break;
          case 68: 
            { return JavaToken.LONG;
            } 
            // fall through
          case 176: break;
          case 69: 
            { return JavaToken.ELSE;
            } 
            // fall through
          case 177: break;
          case 70: 
            { return JavaToken.ENUM;
            } 
            // fall through
          case 178: break;
          case 71: 
            { return JavaToken.NULL_LITERAL;
            } 
            // fall through
          case 179: break;
          case 72: 
            { return JavaToken.GOTO;
            } 
            // fall through
          case 180: break;
          case 73: 
            { return JavaToken.VOID;
            } 
            // fall through
          case 181: break;
          case 74: 
            { return JavaToken.URSHIFTEQ;
            } 
            // fall through
          case 182: break;
          case 75: 
            { return JavaToken.BREAK;
            } 
            // fall through
          case 183: break;
          case 76: 
            { return JavaToken.SHORT;
            } 
            // fall through
          case 184: break;
          case 77: 
            { return JavaToken.SUPER;
            } 
            // fall through
          case 185: break;
          case 78: 
            { return JavaToken.THROW;
            } 
            // fall through
          case 186: break;
          case 79: 
            { return JavaToken.CATCH;
            } 
            // fall through
          case 187: break;
          case 80: 
            { return JavaToken.CONST;
            } 
            // fall through
          case 188: break;
          case 81: 
            { return JavaToken.CLASS;
            } 
            // fall through
          case 189: break;
          case 82: 
            { return JavaToken.FLOAT;
            } 
            // fall through
          case 190: break;
          case 83: 
            { return JavaToken.FINAL;
            } 
            // fall through
          case 191: break;
          case 84: 
            { return JavaToken.WHILE;
            } 
            // fall through
          case 192: break;
          case 85: 
            { return JavaToken.STATIC;
            } 
            // fall through
          case 193: break;
          case 86: 
            { return JavaToken.SWITCH;
            } 
            // fall through
          case 194: break;
          case 87: 
            { return JavaToken.THROWS;
            } 
            // fall through
          case 195: break;
          case 88: 
            { return JavaToken.RETURN;
            } 
            // fall through
          case 196: break;
          case 89: 
            { return JavaToken.NATIVE;
            } 
            // fall through
          case 197: break;
          case 90: 
            { return JavaToken.IMPORT;
            } 
            // fall through
          case 198: break;
          case 91: 
            { return JavaToken.DOUBLE;
            } 
            // fall through
          case 199: break;
          case 92: 
            { return JavaToken.PUBLIC;
            } 
            // fall through
          case 200: break;
          case 93: 
            { return JavaToken.BOOLEAN;
            } 
            // fall through
          case 201: break;
          case 94: 
            { return JavaToken.EXTENDS;
            } 
            // fall through
          case 202: break;
          case 95: 
            { return JavaToken.DEFAULT;
            } 
            // fall through
          case 203: break;
          case 96: 
            { return JavaToken.FINALLY;
            } 
            // fall through
          case 204: break;
          case 97: 
            { return JavaToken.PACKAGE;
            } 
            // fall through
          case 205: break;
          case 98: 
            { return JavaToken.PRIVATE;
            } 
            // fall through
          case 206: break;
          case 99: 
            { return JavaToken.ABSTRACT;
            } 
            // fall through
          case 207: break;
          case 100: 
            { return JavaToken.STRICTFP;
            } 
            // fall through
          case 208: break;
          case 101: 
            { return JavaToken.CONTINUE;
            } 
            // fall through
          case 209: break;
          case 102: 
            { return JavaToken.VOLATILE;
            } 
            // fall through
          case 210: break;
          case 103: 
            { return JavaToken.TRANSIENT;
            } 
            // fall through
          case 211: break;
          case 104: 
            { return JavaToken.INTERFACE;
            } 
            // fall through
          case 212: break;
          case 105: 
            { return JavaToken.PROTECTED;
            } 
            // fall through
          case 213: break;
          case 106: 
            { return JavaToken.INSTANCEOF;
            } 
            // fall through
          case 214: break;
          case 107: 
            { return JavaToken.IMPLEMENTS;
            } 
            // fall through
          case 215: break;
          case 108: 
            { return JavaToken.SYNCHRONIZED;
            } 
            // fall through
          case 216: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
