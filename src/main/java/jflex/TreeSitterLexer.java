/* The following code was generated by JFlex 1.7.0 */

package jflex;

import java.util.Queue;
import java.util.LinkedList;

/*
 * JFlex lexer for converting Tree-sitter leaf nodes to JavaToken
 * Based on Java 1.2+ language features, aligned with tree-sitter-java grammar
 */


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>tree-sitter-java.flex</tt>
 */
public class TreeSitterLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_LITERAL = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
          0,  0,  1, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
          "\11\0\2\1\1\0\2\1\22\0\1\1\1\50\1\64\2\0\1\62"+
                  "\1\54\1\0\1\33\1\34\1\57\1\56\1\42\1\53\1\43\1\60"+
                  "\12\0\1\44\1\41\1\47\1\45\1\46\1\52\1\63\32\0\1\37"+
                  "\1\0\1\40\1\61\1\14\1\0\1\2\1\3\1\7\1\23\1\12"+
                  "\1\24\1\27\1\20\1\21\1\0\1\17\1\11\1\25\1\13\1\10"+
                  "\1\16\1\0\1\6\1\4\1\5\1\22\1\30\1\31\1\26\1\15"+
                  "\1\32\1\35\1\55\1\36\1\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff91\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
          "\2\0\1\1\1\2\21\1\1\3\1\4\1\5\1\6"+
                  "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
                  "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
                  "\1\27\1\30\1\31\1\32\1\33\1\34\2\35\1\36"+
                  "\42\1\1\37\1\1\1\40\10\1\1\41\1\42\1\43"+
                  "\1\1\1\44\1\1\1\45\1\46\1\47\1\50\1\51"+
                  "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
                  "\1\62\1\1\1\35\15\1\1\63\17\1\1\64\2\1"+
                  "\1\65\7\1\1\66\6\1\1\67\5\1\1\70\1\71"+
                  "\1\1\1\72\1\1\1\35\4\1\1\73\10\1\1\74"+
                  "\2\1\1\75\1\1\1\76\4\1\1\77\1\1\1\100"+
                  "\1\1\1\101\1\102\25\1\1\103\1\1\1\35\1\1"+
                  "\1\104\5\1\1\105\1\106\3\1\1\107\1\1\1\110"+
                  "\1\111\1\1\1\112\24\1\1\113\1\114\2\1\1\115"+
                  "\1\1\1\35\2\1\1\116\2\1\1\117\2\1\1\120"+
                  "\1\121\5\1\1\122\4\1\1\123\5\1\1\124\1\1"+
                  "\1\125\6\1\1\35\10\1\1\126\1\1\1\127\1\1"+
                  "\1\130\6\1\1\131\1\132\3\1\1\35\1\133\1\1"+
                  "\1\134\2\1\1\135\12\1\1\136\2\1\1\35\2\1"+
                  "\1\137\3\1\1\140\3\1\1\141\2\1\1\142\1\1"+
                  "\1\35\7\1\1\143\1\144\1\145\1\146\1\35\7\1"+
                  "\1\35\1\147\1\150\1\1\1\2\1\151\2\1\1\35"+
                  "\3\1\1\35\3\1\1\35\3\1\1\152\3\1\1\153"+
                  "\4\1\1\154\7\1\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
          "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
                  "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
                  "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\152\0\152\0\152"+
                  "\0\152\0\152\0\152\0\152\0\152\0\u0459\0\u048e\0\u04c3"+
                  "\0\u04f8\0\u052d\0\u0562\0\152\0\152\0\u0597\0\u05cc\0\u0601"+
                  "\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\152\0\u0774"+
                  "\0\u07a9\0\u0774\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7"+
                  "\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f"+
                  "\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37"+
                  "\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf"+
                  "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\152\0\u0ee8\0\u0f1d\0\u0f52"+
                  "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\152"+
                  "\0\152\0\152\0\u10fa\0\152\0\u112f\0\152\0\152\0\152"+
                  "\0\152\0\152\0\152\0\152\0\152\0\152\0\152\0\152"+
                  "\0\152\0\152\0\152\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238"+
                  "\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0"+
                  "\0\u1415\0\u144a\0\152\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553"+
                  "\0\u1588\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb"+
                  "\0\u1730\0\u1765\0\152\0\u179a\0\u17cf\0\152\0\u1804\0\u1839"+
                  "\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1"+
                  "\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\152\0\u1aea\0\u1b1f\0\u1b54"+
                  "\0\u1b89\0\u1bbe\0\152\0\152\0\u1bf3\0\152\0\u1c28\0\u1c5d"+
                  "\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\152\0\u1d66\0\u1d9b\0\u1dd0"+
                  "\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\152\0\u1f0e\0\u1f43"+
                  "\0\152\0\u1f78\0\152\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081"+
                  "\0\u20b6\0\152\0\u20eb\0\152\0\152\0\u2120\0\u2155\0\u218a"+
                  "\0\u21bf\0\u21f4\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332"+
                  "\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da"+
                  "\0\u250f\0\u2544\0\152\0\u2579\0\u25ae\0\u25e3\0\152\0\u2618"+
                  "\0\u264d\0\u2682\0\u26b7\0\u26ec\0\152\0\152\0\u2721\0\u2756"+
                  "\0\u278b\0\u27c0\0\u27f5\0\152\0\152\0\u282a\0\152\0\u285f"+
                  "\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07"+
                  "\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf"+
                  "\0\u2be4\0\u2c19\0\u2c4e\0\152\0\u2c83\0\u2cb8\0\u2ced\0\152"+
                  "\0\u2d22\0\u2d57\0\u2d8c\0\u2dc1\0\152\0\u2df6\0\u2e2b\0\152"+
                  "\0\u2e60\0\u2e95\0\152\0\152\0\u2eca\0\u2eff\0\u2f34\0\u2f69"+
                  "\0\u2f9e\0\152\0\u2fd3\0\u3008\0\u303d\0\u3072\0\152\0\u30a7"+
                  "\0\u30dc\0\u3111\0\u3146\0\u317b\0\152\0\u31b0\0\152\0\u31e5"+
                  "\0\u321a\0\u324f\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d"+
                  "\0\u33c2\0\u33f7\0\u342c\0\u3461\0\u3496\0\u34cb\0\152\0\u3500"+
                  "\0\152\0\u3535\0\152\0\u356a\0\u359f\0\u35d4\0\u3609\0\u363e"+
                  "\0\u3673\0\152\0\152\0\u36a8\0\u36dd\0\u3712\0\u3747\0\152"+
                  "\0\u377c\0\152\0\u37b1\0\u37e6\0\152\0\u381b\0\u3850\0\u3885"+
                  "\0\u38ba\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3\0\u39f8\0\152"+
                  "\0\u3a2d\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\152\0\u3b36\0\u3b6b"+
                  "\0\u3ba0\0\152\0\u3bd5\0\u3c0a\0\u3c3f\0\152\0\u3c74\0\u3ca9"+
                  "\0\152\0\u3cde\0\u3d13\0\u3d48\0\u3d7d\0\u3db2\0\u3de7\0\u3e1c"+
                  "\0\u3e51\0\u3e86\0\152\0\152\0\152\0\152\0\u3ebb\0\u3ef0"+
                  "\0\u3f25\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e\0\u4063\0\152"+
                  "\0\152\0\u4098\0\152\0\152\0\u40cd\0\u4102\0\u4137\0\u416c"+
                  "\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275\0\u42aa\0\u42df\0\u4314"+
                  "\0\u4349\0\u437e\0\u0774\0\u43b3\0\u43e8\0\u441d\0\152\0\u4452"+
                  "\0\u4487\0\u44bc\0\u44f1\0\152\0\u4526\0\u455b\0\u4590\0\u45c5"+
                  "\0\u45fa\0\u462f\0\u4664\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
          "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
                  "\1\13\1\14\1\15\1\16\2\3\1\17\1\3\1\20"+
                  "\1\21\1\3\1\22\1\23\3\3\1\24\1\25\1\3"+
                  "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
                  "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
                  "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
                  "\1\56\1\57\1\60\1\4\2\60\1\61\57\60\1\62"+
                  "\1\3\1\0\63\3\1\0\1\4\63\0\1\3\1\0"+
                  "\1\3\1\63\62\3\1\0\4\3\1\64\1\3\1\65"+
                  "\1\66\3\3\1\67\3\3\1\70\44\3\1\0\3\3"+
                  "\1\71\7\3\1\72\2\3\1\73\1\3\1\74\6\3"+
                  "\1\75\34\3\1\0\4\3\1\76\6\3\1\77\2\3"+
                  "\1\100\45\3\1\0\10\3\1\101\53\3\1\0\1\102"+
                  "\5\3\1\103\1\104\6\3\1\105\45\3\1\0\5\3"+
                  "\1\106\56\3\1\0\6\3\1\107\10\3\1\110\44\3"+
                  "\1\0\7\3\1\111\1\3\1\112\12\3\1\113\37\3"+
                  "\1\0\1\114\7\3\1\115\7\3\1\116\43\3\1\0"+
                  "\1\117\3\3\1\120\13\3\1\121\43\3\1\0\10\3"+
                  "\1\122\53\3\1\0\11\3\1\123\7\3\1\124\1\125"+
                  "\1\126\40\3\1\0\6\3\1\127\1\3\1\130\53\3"+
                  "\1\0\1\131\5\3\1\132\1\133\7\3\1\134\44\3"+
                  "\1\0\6\3\1\135\55\3\1\0\16\3\1\136\45\3"+
                  "\1\0\41\3\1\137\22\3\1\0\42\3\1\140\21\3"+
                  "\1\0\43\3\1\141\20\3\1\0\43\3\1\142\1\143"+
                  "\17\3\1\0\43\3\1\144\1\3\1\145\16\3\1\0"+
                  "\43\3\1\146\20\3\1\0\43\3\1\147\1\150\4\3"+
                  "\1\151\12\3\1\0\43\3\1\152\6\3\1\153\11\3"+
                  "\1\0\43\3\1\154\7\3\1\155\10\3\1\0\43\3"+
                  "\1\156\10\3\1\157\7\3\1\0\43\3\1\160\20\3"+
                  "\1\0\43\3\1\161\20\3\1\0\43\3\1\162\20\3"+
                  "\1\0\43\3\1\163\20\3\1\0\17\3\1\164\43\3"+
                  "\1\60\1\0\64\60\1\0\3\60\1\165\57\60\1\3"+
                  "\1\0\2\3\1\166\61\3\1\0\10\3\1\167\53\3"+
                  "\1\0\6\3\1\170\55\3\1\0\6\3\1\171\55\3"+
                  "\1\0\3\3\1\172\60\3\1\0\11\3\1\173\52\3"+
                  "\1\0\1\174\3\3\1\175\57\3\1\0\11\3\1\176"+
                  "\52\3\1\0\6\3\1\177\55\3\1\0\14\3\1\200"+
                  "\47\3\1\0\17\3\1\201\44\3\1\0\1\202\12\3"+
                  "\1\203\4\3\1\204\43\3\1\0\14\3\1\205\47\3"+
                  "\1\0\4\3\1\206\12\3\1\207\44\3\1\0\3\3"+
                  "\1\210\60\3\1\0\2\3\1\211\1\212\60\3\1\0"+
                  "\11\3\1\213\52\3\1\0\1\214\63\3\1\0\1\215"+
                  "\63\3\1\0\3\3\1\216\60\3\1\0\11\3\1\217"+
                  "\52\3\1\0\11\3\1\220\52\3\1\0\2\3\1\221"+
                  "\61\3\1\0\20\3\1\222\1\223\42\3\1\0\3\3"+
                  "\1\224\60\3\1\0\3\3\1\225\60\3\1\0\27\3"+
                  "\1\226\34\3\1\0\7\3\1\227\54\3\1\0\5\3"+
                  "\1\230\56\3\1\0\6\3\1\231\10\3\1\232\44\3"+
                  "\1\0\1\3\1\233\62\3\1\0\24\3\1\234\37\3"+
                  "\1\0\2\3\1\235\1\236\60\3\1\0\10\3\1\237"+
                  "\53\3\1\0\14\3\1\240\47\3\1\0\20\3\1\241"+
                  "\43\3\1\0\5\3\1\242\14\3\1\243\41\3\1\0"+
                  "\7\3\1\244\54\3\1\0\4\3\1\245\57\3\1\0"+
                  "\6\3\1\246\55\3\1\0\11\3\1\247\52\3\1\0"+
                  "\7\3\1\250\7\3\1\251\44\3\1\0\17\3\1\252"+
                  "\44\3\1\0\41\3\1\253\22\3\1\0\43\3\1\254"+
                  "\1\255\17\3\1\0\43\3\1\256\20\3\1\0\11\3"+
                  "\1\257\51\3\1\60\1\0\4\60\1\260\56\60\1\3"+
                  "\1\0\3\3\1\261\60\3\1\0\1\262\63\3\1\0"+
                  "\7\3\1\263\54\3\1\0\5\3\1\264\56\3\1\0"+
                  "\10\3\1\265\53\3\1\0\1\266\63\3\1\0\3\3"+
                  "\1\267\60\3\1\0\17\3\1\270\44\3\1\0\5\3"+
                  "\1\271\56\3\1\0\4\3\1\272\57\3\1\0\10\3"+
                  "\1\273\53\3\1\0\3\3\1\274\60\3\1\0\11\3"+
                  "\1\275\52\3\1\0\10\3\1\276\53\3\1\0\10\3"+
                  "\1\277\53\3\1\0\6\3\1\300\55\3\1\0\2\3"+
                  "\1\301\61\3\1\0\20\3\1\302\43\3\1\0\10\3"+
                  "\1\303\53\3\1\0\5\3\1\304\56\3\1\0\2\3"+
                  "\1\305\1\306\60\3\1\0\2\3\1\307\61\3\1\0"+
                  "\4\3\1\310\57\3\1\0\1\311\63\3\1\0\25\3"+
                  "\1\312\36\3\1\0\10\3\1\313\53\3\1\0\10\3"+
                  "\1\314\53\3\1\0\23\3\1\315\40\3\1\0\10\3"+
                  "\1\316\53\3\1\0\17\3\1\317\44\3\1\0\7\3"+
                  "\1\320\54\3\1\0\15\3\1\321\46\3\1\0\3\3"+
                  "\1\322\60\3\1\0\26\3\1\323\35\3\1\0\7\3"+
                  "\1\324\54\3\1\0\12\3\1\325\51\3\1\0\3\3"+
                  "\1\326\60\3\1\0\10\3\1\327\53\3\1\0\11\3"+
                  "\1\330\52\3\1\0\6\3\1\331\1\332\54\3\1\0"+
                  "\1\3\1\333\62\3\1\0\17\3\1\334\44\3\1\0"+
                  "\1\335\63\3\1\0\2\3\1\204\61\3\1\0\1\336"+
                  "\63\3\1\0\1\337\63\3\1\0\1\340\63\3\1\0"+
                  "\21\3\1\341\42\3\1\0\7\3\1\342\54\3\1\0"+
                  "\43\3\1\343\20\3\1\0\3\3\1\344\57\3\1\60"+
                  "\1\0\17\60\1\345\43\60\1\3\1\0\4\3\1\346"+
                  "\57\3\1\0\15\3\1\347\46\3\1\0\10\3\1\350"+
                  "\53\3\1\0\15\3\1\313\46\3\1\0\4\3\1\351"+
                  "\57\3\1\0\17\3\1\352\44\3\1\0\5\3\1\353"+
                  "\56\3\1\0\16\3\1\354\45\3\1\0\3\3\1\355"+
                  "\60\3\1\0\4\3\1\356\57\3\1\0\5\3\1\357"+
                  "\56\3\1\0\2\3\1\360\61\3\1\0\12\3\1\361"+
                  "\51\3\1\0\27\3\1\362\34\3\1\0\4\3\1\363"+
                  "\57\3\1\0\16\3\1\364\45\3\1\0\3\3\1\365"+
                  "\60\3\1\0\17\3\1\366\44\3\1\0\2\3\1\367"+
                  "\61\3\1\0\1\370\63\3\1\0\7\3\1\371\54\3"+
                  "\1\0\12\3\1\372\51\3\1\0\11\3\1\373\52\3"+
                  "\1\0\26\3\1\374\35\3\1\0\12\3\1\375\51\3"+
                  "\1\0\1\376\63\3\1\0\10\3\1\377\53\3\1\0"+
                  "\1\u0100\63\3\1\0\17\3\1\u0101\44\3\1\0\17\3"+
                  "\1\u0102\2\3\1\u0103\41\3\1\0\1\u0104\63\3\1\0"+
                  "\4\3\1\u0105\57\3\1\0\3\3\1\u0106\60\3\1\0"+
                  "\4\3\1\u0107\57\3\1\0\10\3\1\u0108\53\3\1\0"+
                  "\7\3\1\u0109\54\3\1\0\23\3\1\u010a\40\3\1\0"+
                  "\20\3\1\u010b\43\3\1\0\3\3\1\u010c\60\3\1\0"+
                  "\7\3\1\u010d\54\3\1\0\3\3\1\u010e\60\3\1\0"+
                  "\12\3\1\u010f\51\3\1\0\10\3\1\u0110\53\3\1\0"+
                  "\10\3\1\u0111\52\3\1\60\1\0\11\60\1\u0112\51\60"+
                  "\1\3\1\0\1\u0113\63\3\1\0\1\u0114\63\3\1\0"+
                  "\13\3\1\371\50\3\1\0\5\3\1\u0115\56\3\1\0"+
                  "\3\3\1\u0116\60\3\1\0\4\3\1\u0117\57\3\1\0"+
                  "\16\3\1\u0118\45\3\1\0\17\3\1\u0119\44\3\1\0"+
                  "\17\3\1\u011a\44\3\1\0\2\3\1\u011b\61\3\1\0"+
                  "\11\3\1\u011c\52\3\1\0\11\3\1\u011d\52\3\1\0"+
                  "\5\3\1\u011e\56\3\1\0\12\3\1\u011f\51\3\1\0"+
                  "\5\3\1\u0120\56\3\1\0\21\3\1\u0121\42\3\1\0"+
                  "\10\3\1\u0122\53\3\1\0\7\3\1\u0123\54\3\1\0"+
                  "\25\3\1\u0124\36\3\1\0\5\3\1\u0125\56\3\1\0"+
                  "\3\3\1\u0126\60\3\1\0\5\3\1\u0127\56\3\1\0"+
                  "\11\3\1\u0128\52\3\1\0\7\3\1\u0129\54\3\1\0"+
                  "\11\3\1\u012a\52\3\1\0\22\3\1\u012b\41\3\1\0"+
                  "\17\3\1\u012c\44\3\1\0\3\3\1\u012d\60\3\1\0"+
                  "\23\3\1\u012e\40\3\1\0\10\3\1\u012f\53\3\1\0"+
                  "\1\u0130\63\3\1\0\7\3\1\u0131\54\3\1\0\7\3"+
                  "\1\u0132\54\3\1\0\17\3\1\u0133\44\3\1\0\3\3"+
                  "\1\u0134\60\3\1\0\4\3\1\u0135\56\3\1\60\1\0"+
                  "\25\60\1\u0136\35\60\1\3\1\0\5\3\1\u0137\56\3"+
                  "\1\0\11\3\1\u0138\52\3\1\0\22\3\1\u0139\41\3"+
                  "\1\0\6\3\1\u013a\55\3\1\0\10\3\1\u013b\53\3"+
                  "\1\0\21\3\1\124\42\3\1\0\20\3\1\u013c\43\3"+
                  "\1\0\3\3\1\u013d\60\3\1\0\17\3\1\u0102\44\3"+
                  "\1\0\6\3\1\u013e\55\3\1\0\2\3\1\u013f\61\3"+
                  "\1\0\17\3\1\u0140\44\3\1\0\10\3\1\u0141\53\3"+
                  "\1\0\3\3\1\u0142\60\3\1\0\10\3\1\u0143\53\3"+
                  "\1\0\3\3\1\u0144\60\3\1\0\6\3\1\u0145\55\3"+
                  "\1\0\5\3\1\u0146\56\3\1\0\1\u0147\63\3\1\0"+
                  "\22\3\1\u0148\41\3\1\0\10\3\1\u0149\53\3\1\0"+
                  "\7\3\1\234\54\3\1\0\3\3\1\u014a\60\3\1\0"+
                  "\13\3\1\u014b\50\3\1\0\7\3\1\u014c\54\3\1\0"+
                  "\13\3\1\u014d\50\3\1\0\22\3\1\u014e\40\3\1\60"+
                  "\1\0\12\60\1\u014f\50\60\1\3\1\0\3\3\1\u0150"+
                  "\60\3\1\0\12\3\1\u0151\51\3\1\0\14\3\1\u0152"+
                  "\47\3\1\0\11\3\1\u0153\52\3\1\0\11\3\1\u0154"+
                  "\52\3\1\0\10\3\1\u0155\53\3\1\0\10\3\1\u0156"+
                  "\53\3\1\0\23\3\1\u0157\40\3\1\0\3\3\1\u0158"+
                  "\60\3\1\0\10\3\1\u0159\53\3\1\0\10\3\1\u015a"+
                  "\53\3\1\0\1\u015b\63\3\1\0\10\3\1\u015c\53\3"+
                  "\1\0\5\3\1\u015d\56\3\1\0\17\3\1\u015e\44\3"+
                  "\1\0\11\3\1\u015f\52\3\1\0\10\3\1\u0160\53\3"+
                  "\1\0\14\3\1\u0161\47\3\1\0\1\u0162\62\3\1\60"+
                  "\1\0\22\60\1\u0163\40\60\1\3\1\0\3\3\1\u0164"+
                  "\60\3\1\0\17\3\1\u0165\44\3\1\0\3\3\1\u0166"+
                  "\60\3\1\0\4\3\1\u0167\57\3\1\0\23\3\1\u0168"+
                  "\40\3\1\0\10\3\1\u0169\53\3\1\0\21\3\1\u016a"+
                  "\42\3\1\0\25\3\1\u016b\36\3\1\0\3\3\1\u016c"+
                  "\60\3\1\0\6\3\1\u016d\55\3\1\0\10\3\1\u016e"+
                  "\53\3\1\0\10\3\1\u016f\53\3\1\0\3\3\1\u0170"+
                  "\60\3\1\0\10\3\1\u0171\53\3\1\0\5\3\1\u0172"+
                  "\55\3\1\60\1\0\4\60\1\u0173\56\60\1\3\1\0"+
                  "\13\3\1\u0174\50\3\1\0\30\3\1\u0175\33\3\1\0"+
                  "\12\3\1\u0176\51\3\1\0\10\3\1\u0177\53\3\1\0"+
                  "\4\3\1\u0178\57\3\1\0\10\3\1\u0179\53\3\1\0"+
                  "\17\3\1\u017a\44\3\1\0\22\3\1\u017b\41\3\1\0"+
                  "\4\3\1\u017c\57\3\1\0\2\3\1\u017d\61\3\1\0"+
                  "\10\3\1\u017e\52\3\1\60\1\0\1\u017f\62\60\1\3"+
                  "\1\0\14\3\1\u0180\47\3\1\0\10\3\1\u0181\53\3"+
                  "\1\0\7\3\1\u0182\54\3\1\0\11\3\1\u0183\52\3"+
                  "\1\0\1\u0184\63\3\1\0\4\3\1\u0185\57\3\1\0"+
                  "\11\3\1\u0186\51\3\1\60\1\0\25\60\1\u0187\35\60"+
                  "\1\3\1\0\10\3\1\u0188\53\3\1\0\21\3\1\u0189"+
                  "\42\3\1\0\17\3\1\u018a\44\3\1\0\3\3\1\u018b"+
                  "\60\3\1\0\7\3\1\u018c\54\3\1\0\12\3\1\u018d"+
                  "\51\3\1\0\25\3\1\u018e\35\3\1\60\1\0\23\60"+
                  "\1\u018f\37\60\1\3\1\0\3\3\1\u0190\60\3\1\0"+
                  "\7\3\1\u0191\54\3\1\0\12\3\1\u0192\50\3\1\60"+
                  "\1\0\10\60\1\u0193\52\60\1\3\1\0\10\3\1\u0194"+
                  "\53\3\1\0\17\3\1\u0195\44\3\1\0\14\3\1\u0196"+
                  "\46\3\1\60\1\0\11\60\1\u0197\51\60\1\3\1\0"+
                  "\4\3\1\u0198\57\3\1\0\3\3\1\u0199\60\3\1\0"+
                  "\6\3\1\u019a\54\3\1\60\1\0\3\60\1\u019b\57\60"+
                  "\1\3\1\0\1\u019c\63\3\1\0\10\3\1\u019d\53\3"+
                  "\1\0\17\3\1\u019e\44\3\1\0\7\3\1\u019f\54\3"+
                  "\1\0\4\3\1\u01a0\57\3\1\0\11\3\1\u01a1\52\3"+
                  "\1\0\1\u01a2\63\3\1\0\3\3\1\u01a3\60\3\1\0"+
                  "\7\3\1\u01a4\54\3\1\0\12\3\1\u01a5\51\3\1\0"+
                  "\7\3\1\u01a6\54\3\1\0\17\3\1\u01a7\44\3\1\0"+
                  "\3\3\1\u01a8\60\3\1\0\10\3\1\u01a9\53\3\1\0"+
                  "\4\3\1\u01aa\57\3\1\0\1\u01ab\63\3\1\0\7\3"+
                  "\1\u01ac\53\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18073];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
          "Unknown internal scanner error",
          "Error: could not match input",
          "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
          "\2\0\u01aa\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[428];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
   the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
   from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  // Очередь для накопления токенов в случае составных правил
  private Queue<JavaToken> tokenQueue = new LinkedList<>();

  // Метод для получения следующего токена с учётом очереди
  public JavaToken nextToken() throws java.io.IOException {
    if (!tokenQueue.isEmpty()) {
      return tokenQueue.poll();
    }
    return yylex();
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TreeSitterLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
              zzBuffer, 0,
              zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
          case '\u000B':  // fall through
          case '\u000C':  // fall through
          case '\u0085':  // fall through
          case '\u2028':  // fall through
          case '\u2029':
            yyline++;
            yycolumn = 0;
            zzR = false;
            break;
          case '\r':
            yyline++;
            yycolumn = 0;
            zzR = true;
            break;
          case '\n':
            if (zzR)
              zzR = false;
            else {
              yyline++;
              yycolumn = 0;
            }
            break;
          default:
            zzR = false;
            yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        {
          return JavaToken.EOF;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
          { return JavaToken.ERROR;
          }
          // fall through
          case 110: break;
          case 2:
          { /* ignore */
          }
          // fall through
          case 111: break;
          case 3:
          { return JavaToken.LPAREN;
          }
          // fall through
          case 112: break;
          case 4:
          { return JavaToken.RPAREN;
          }
          // fall through
          case 113: break;
          case 5:
          { return JavaToken.LBRACE;
          }
          // fall through
          case 114: break;
          case 6:
          { return JavaToken.RBRACE;
          }
          // fall through
          case 115: break;
          case 7:
          { return JavaToken.LBRACK;
          }
          // fall through
          case 116: break;
          case 8:
          { return JavaToken.RBRACK;
          }
          // fall through
          case 117: break;
          case 9:
          { return JavaToken.SEMICOLON;
          }
          // fall through
          case 118: break;
          case 10:
          { return JavaToken.COMMA;
          }
          // fall through
          case 119: break;
          case 11:
          { return JavaToken.DOT;
          }
          // fall through
          case 120: break;
          case 12:
          { return JavaToken.COLON;
          }
          // fall through
          case 121: break;
          case 13:
          { return JavaToken.EQ;
          }
          // fall through
          case 122: break;
          case 14:
          { return JavaToken.GT;
          }
          // fall through
          case 123: break;
          case 15:
          { return JavaToken.LT;
          }
          // fall through
          case 124: break;
          case 16:
          { return JavaToken.NOT;
          }
          // fall through
          case 125: break;
          case 17:
          { return JavaToken.COMP;
          }
          // fall through
          case 126: break;
          case 18:
          { return JavaToken.QUESTION;
          }
          // fall through
          case 127: break;
          case 19:
          { return JavaToken.MINUS;
          }
          // fall through
          case 128: break;
          case 20:
          { return JavaToken.AND;
          }
          // fall through
          case 129: break;
          case 21:
          { return JavaToken.OR;
          }
          // fall through
          case 130: break;
          case 22:
          { return JavaToken.PLUS;
          }
          // fall through
          case 131: break;
          case 23:
          { return JavaToken.MULT;
          }
          // fall through
          case 132: break;
          case 24:
          { return JavaToken.DIV;
          }
          // fall through
          case 133: break;
          case 25:
          { return JavaToken.XOR;
          }
          // fall through
          case 134: break;
          case 26:
          { return JavaToken.MOD;
          }
          // fall through
          case 135: break;
          case 27:
          { return JavaToken.AT;
          }
          // fall through
          case 136: break;
          case 28:
          { yybegin(STRING_LITERAL);
          }
          // fall through
          case 137: break;
          case 29:
          { yybegin(YYINITIAL); return JavaToken.ERROR;
          }
          // fall through
          case 138: break;
          case 30:
          { yybegin(YYINITIAL); /* ignore closing quote if no string_fragment */
          }
          // fall through
          case 139: break;
          case 31:
          { return JavaToken.IF;
          }
          // fall through
          case 140: break;
          case 32:
          { return JavaToken.DO;
          }
          // fall through
          case 141: break;
          case 33:
          { return JavaToken.COLONCOLON;
          }
          // fall through
          case 142: break;
          case 34:
          { return JavaToken.EQEQ;
          }
          // fall through
          case 143: break;
          case 35:
          { return JavaToken.GTEQ;
          }
          // fall through
          case 144: break;
          case 36:
          { return JavaToken.LTEQ;
          }
          // fall through
          case 145: break;
          case 37:
          { return JavaToken.NOTEQ;
          }
          // fall through
          case 146: break;
          case 38:
          { return JavaToken.MINUSEQ;
          }
          // fall through
          case 147: break;
          case 39:
          { return JavaToken.ARROW;
          }
          // fall through
          case 148: break;
          case 40:
          { return JavaToken.MINUSMINUS;
          }
          // fall through
          case 149: break;
          case 41:
          { return JavaToken.ANDEQ;
          }
          // fall through
          case 150: break;
          case 42:
          { return JavaToken.ANDAND;
          }
          // fall through
          case 151: break;
          case 43:
          { return JavaToken.OREQ;
          }
          // fall through
          case 152: break;
          case 44:
          { return JavaToken.OROR;
          }
          // fall through
          case 153: break;
          case 45:
          { return JavaToken.PLUSEQ;
          }
          // fall through
          case 154: break;
          case 46:
          { return JavaToken.PLUSPLUS;
          }
          // fall through
          case 155: break;
          case 47:
          { return JavaToken.MULTEQ;
          }
          // fall through
          case 156: break;
          case 48:
          { return JavaToken.DIVEQ;
          }
          // fall through
          case 157: break;
          case 49:
          { return JavaToken.XOREQ;
          }
          // fall through
          case 158: break;
          case 50:
          { return JavaToken.MODEQ;
          }
          // fall through
          case 159: break;
          case 51:
          { return JavaToken.TRY;
          }
          // fall through
          case 160: break;
          case 52:
          { return JavaToken.EOF;
          }
          // fall through
          case 161: break;
          case 53:
          { return JavaToken.NEW;
          }
          // fall through
          case 162: break;
          case 54:
          { return JavaToken.INT;
          }
          // fall through
          case 163: break;
          case 55:
          { return JavaToken.FOR;
          }
          // fall through
          case 164: break;
          case 56:
          { return JavaToken.ELLIPSIS;
          }
          // fall through
          case 165: break;
          case 57:
          { return JavaToken.RSHIFTEQ;
          }
          // fall through
          case 166: break;
          case 58:
          { return JavaToken.LSHIFTEQ;
          }
          // fall through
          case 167: break;
          case 59:
          { return JavaToken.BYTE;
          }
          // fall through
          case 168: break;
          case 60:
          { return JavaToken.BOOLEAN_LITERAL;
          }
          // fall through
          case 169: break;
          case 61:
          { return JavaToken.THIS;
          }
          // fall through
          case 170: break;
          case 62:
          { return JavaToken.CASE;
          }
          // fall through
          case 171: break;
          case 63:
          { return JavaToken.CHAR;
          }
          // fall through
          case 172: break;
          case 64:
          { return JavaToken.LONG;
          }
          // fall through
          case 173: break;
          case 65:
          { return JavaToken.ELSE;
          }
          // fall through
          case 174: break;
          case 66:
          { return JavaToken.ENUM;
          }
          // fall through
          case 175: break;
          case 67:
          { return JavaToken.URSHIFTEQ;
          }
          // fall through
          case 176: break;
          case 68:
          { return JavaToken.BREAK;
          }
          // fall through
          case 177: break;
          case 69:
          { return JavaToken.SHORT;
          }
          // fall through
          case 178: break;
          case 70:
          { return JavaToken.SUPER;
          }
          // fall through
          case 179: break;
          case 71:
          { return JavaToken.THROW;
          }
          // fall through
          case 180: break;
          case 72:
          { return JavaToken.CATCH;
          }
          // fall through
          case 181: break;
          case 73:
          { return JavaToken.CONST;
          }
          // fall through
          case 182: break;
          case 74:
          { return JavaToken.CLASS;
          }
          // fall through
          case 183: break;
          case 75:
          { return JavaToken.FLOAT;
          }
          // fall through
          case 184: break;
          case 76:
          { return JavaToken.FINAL;
          }
          // fall through
          case 185: break;
          case 77:
          { return JavaToken.WHILE;
          }
          // fall through
          case 186: break;
          case 78:
          { return JavaToken.STATIC;
          }
          // fall through
          case 187: break;
          case 79:
          { return JavaToken.SWITCH;
          }
          // fall through
          case 188: break;
          case 80:
          { return JavaToken.THROWS;
          }
          // fall through
          case 189: break;
          case 81:
          { return JavaToken.RETURN;
          }
          // fall through
          case 190: break;
          case 82:
          { return JavaToken.NATIVE;
          }
          // fall through
          case 191: break;
          case 83:
          { return JavaToken.PUBLIC;
          }
          // fall through
          case 192: break;
          case 84:
          { return JavaToken.IMPORT;
          }
          // fall through
          case 193: break;
          case 85:
          { return JavaToken.DOUBLE;
          }
          // fall through
          case 194: break;
          case 86:
          { return JavaToken.EXTENDS;
          }
          // fall through
          case 195: break;
          case 87:
          { return JavaToken.PACKAGE;
          }
          // fall through
          case 196: break;
          case 88:
          { return JavaToken.PRIVATE;
          }
          // fall through
          case 197: break;
          case 89:
          { return JavaToken.DEFAULT;
          }
          // fall through
          case 198: break;
          case 90:
          { return JavaToken.FINALLY;
          }
          // fall through
          case 199: break;
          case 91:
          { return JavaToken.ABSTRACT;
          }
          // fall through
          case 200: break;
          case 92:
          { return JavaToken.STRICTFP;
          }
          // fall through
          case 201: break;
          case 93:
          { return JavaToken.CONTINUE;
          }
          // fall through
          case 202: break;
          case 94:
          { return JavaToken.VOLATILE;
          }
          // fall through
          case 203: break;
          case 95:
          { return JavaToken.TRANSIENT;
          }
          // fall through
          case 204: break;
          case 96:
          { return JavaToken.PROTECTED;
          }
          // fall through
          case 205: break;
          case 97:
          { return JavaToken.INTERFACE;
          }
          // fall through
          case 206: break;
          case 98:
          { return JavaToken.VOID;
          }
          // fall through
          case 207: break;
          case 99:
          { return JavaToken.INSTANCEOF;
          }
          // fall through
          case 208: break;
          case 100:
          { return JavaToken.IDENTIFIER;
          }
          // fall through
          case 209: break;
          case 101:
          { return JavaToken.IMPLEMENTS;
          }
          // fall through
          case 210: break;
          case 102:
          { tokenQueue.add(JavaToken.INTERFACE); return JavaToken.AT;
          }
          // fall through
          case 211: break;
          case 103:
          { return JavaToken.BOOLEAN;
          }
          // fall through
          case 212: break;
          case 104:
          { return JavaToken.SYNCHRONIZED;
          }
          // fall through
          case 213: break;
          case 105:
          { return JavaToken.NULL_LITERAL;
          }
          // fall through
          case 214: break;
          case 106:
          { return JavaToken.STRING_LITERAL;
          }
          // fall through
          case 215: break;
          case 107:
          { return JavaToken.CHARACTER_LITERAL;
          }
          // fall through
          case 216: break;
          case 108:
          { return JavaToken.INTEGER_LITERAL;
          }
          // fall through
          case 217: break;
          case 109:
          { return JavaToken.FLOATING_POINT_LITERAL;
          }
          // fall through
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
